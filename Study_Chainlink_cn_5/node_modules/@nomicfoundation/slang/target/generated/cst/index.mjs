// This file is generated automatically by infrastructure scripts. Please don't edit by hand.
import * as generated from "../../../wasm/index.mjs";
export const NonterminalKind = generated.cst.NonterminalKind;
export const TerminalKind = generated.cst.TerminalKind;
export const TerminalKindExtensions = generated.cst.TerminalKindExtensions;
export const EdgeLabel = generated.cst.EdgeLabel;
export const NodeVariant = generated.cst.NodeVariant;
export const NonterminalNode = generated.cst.NonterminalNode;
export const TerminalNode = generated.cst.TerminalNode;
export const Cursor = generated.cst.Cursor;
export const Query = generated.cst.Query;
export const QueryMatchIterator = generated.cst.QueryMatchIterator;
/*
 * Helpers:
 */
export function assertIsNonterminalNode(node, kind, text) {
    if (!(node instanceof NonterminalNode)) {
        throw new Error("Node provided is not a NonterminalNode.");
    }
    if (kind !== undefined && kind !== node.kind) {
        throw new Error(`Node's NonterminalKind is expected to be '${kind}', but got '${node.kind}'.`);
    }
    if (text !== undefined && text !== node.unparse()) {
        throw new Error(`Node's text content is expected to be '${text}', but got '${node.unparse()}'.`);
    }
}
export function assertIsTerminalNode(node, kind, text) {
    if (!(node instanceof TerminalNode)) {
        throw new Error("Node provided is not a TerminalNode.");
    }
    if (kind !== undefined && kind !== node.kind) {
        throw new Error(`Node's TerminalKind is expected to be '${kind}', but got '${node.kind}'.`);
    }
    if (text !== undefined && text !== node.unparse()) {
        throw new Error(`Node's text content is expected to be '${text}', but got '${node.unparse()}'.`);
    }
}
